1. What is Reconcilation?
-In React.js, reconciliation is the process by which React updates the DOM to match the structure of the React components. When there's a change in the state or props of a component, React needs to determine how to efficiently update the user interface.
Reconciliation involves comparing the current state of the virtual DOM with the previous state and figuring out what has changed. React then calculates the most efficient way to update the real DOM based on these differences. This process helps to minimize the number of changes needed to be made to the actual DOM, which improves performance.
React's reconciliation algorithm is highly efficient and ensures that only the necessary updates are applied to the DOM, making React applications fast and responsive.

2.What Are Props?
-In React.js, "props" (short for properties) are a way of passing data from a parent component to a child component. Props are read-only, meaning that the child component cannot modify the props it receives from its parent.
Here's how props work in React:

1. **Passing Props**: Props are passed to a component as attributes in JSX. For example:
   ```jsx
   function ParentComponent() {
     return <ChildComponent name="John" age={30} />;
   }
   ```

2. **Accessing Props**: Inside the child component, props are accessed as properties of the `props` object. For example:
   ```jsx
   function ChildComponent(props) {
     return <div>Name: {props.name}, Age: {props.age}</div>;
   }
   ```
3. **Using Props Data**: The child component can use the data passed via props to render its UI dynamically. Props can contain any type of data, including strings, numbers, objects, arrays, or even functions.
Props are essential for creating reusable and composable components in React. They enable components to be configurable and adaptable to different data and contexts, making React applications more flexible and maintainable.
